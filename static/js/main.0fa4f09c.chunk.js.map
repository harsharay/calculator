{"version":3,"sources":["Components/KeypadComponent/KeypadComponent.js","Components/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["KeypadComponent","number","value","addingToNumberStack","lightDark","className","onClick","num","console","log","Calculator","getLightDarkThemeData","useState","numbers","setNumbers","first","setFirst","second","setSecond","currentOperator","setCurrentOperator","scientificButtonClicked","setScientificButtonClicked","positiveOrNegative","setPositiveOrNegative","setLightDark","useEffect","i","prevValue","element","eval","prev","handleScientificButtonClick","handleSpecialButttonClick","e","target","Math","sqrt","handleLightDarkToggle","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fa4f09c.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\n\r\nimport \"./KeypadComponent.css\"\r\n\r\nconst KeypadComponent = ({ number, value, addingToNumberStack, lightDark }) => {\r\n\r\n\r\n    const handleButtonClick = num => {\r\n        console.log(num)\r\n        addingToNumberStack(num)\r\n    }\r\n\r\n    return (\r\n        <div className={ `${lightDark ? 'lightMode' : 'darkMode'} keypadComponentStyle` } onClick={() => handleButtonClick(value)}>\r\n            <p>{number}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KeypadComponent;","import React, { useState, useEffect } from \"react\"\r\nimport KeypadComponent from \"../KeypadComponent/KeypadComponent\"\r\n\r\nimport \"./Calculator.css\"\r\n\r\nconst Calculator = ({ getLightDarkThemeData }) => {\r\n\r\n    const [numbers, setNumbers] = useState([])\r\n    const [first, setFirst] = useState(\"\")\r\n    const [second, setSecond] = useState(\"\")\r\n    const [currentOperator, setCurrentOperator] = useState(\"\")\r\n    const [scientificButtonClicked, setScientificButtonClicked] = useState(false)\r\n    const [positiveOrNegative, setPositiveOrNegative] = useState(true) //true is for positive\r\n    const [lightDark, setLightDark] = useState(true) //true implies light mode \r\n\r\n    useEffect(() => {\r\n        for(let i=1; i<10; i++) {\r\n            setNumbers(prevValue => [...prevValue, i])\r\n        }\r\n    },[])\r\n\r\n    const addingToNumberStack = element => {\r\n        if(element === \"+\" || element === \"-\" || element ===\"*\" || element === \"/\") {\r\n            if(first && second) {\r\n                // eslint-disable-next-line no-eval\r\n                setFirst(eval(first+currentOperator+second))\r\n                setSecond(\"\")\r\n                setCurrentOperator(element)\r\n            } else {\r\n                setCurrentOperator(element)\r\n            }\r\n        } else if(element === \"=\"){\r\n            // eslint-disable-next-line no-eval\r\n            setFirst(eval(first+currentOperator+second))\r\n            setSecond(\"\")\r\n            setCurrentOperator(\"\")\r\n        } else if(element === \"Clear\"){\r\n            setFirst(\"\")\r\n            setSecond(\"\")\r\n            setCurrentOperator(\"\")\r\n        } else {\r\n            if(currentOperator) {\r\n                setSecond(prev => prev+element)\r\n            } else {\r\n                setFirst(prev => prev+element)\r\n            }\r\n        }\r\n    }\r\n    \r\n    const handleScientificButtonClick = () => {\r\n        setScientificButtonClicked(!scientificButtonClicked)\r\n    }\r\n\r\n    const handleSpecialButttonClick = e => {\r\n        let { value } = e.target\r\n        if(value === \"sign\") {\r\n            if(positiveOrNegative) {\r\n                if(currentOperator) {\r\n                    setSecond(prev => prev*-1)\r\n                } else {\r\n                    setFirst(prev => prev*-1)\r\n                }\r\n            } else {\r\n                if(currentOperator) {\r\n                    setSecond(prev => prev*1)\r\n                } else {\r\n                    setFirst(prev => prev*1)\r\n                }\r\n            }\r\n        } else if(value === \"square\") {\r\n            if(second) {\r\n                setSecond(prev => prev * prev)\r\n                setFirst(\"\")\r\n                setCurrentOperator(\"\")\r\n            } else {\r\n                setFirst(prev => prev * prev)\r\n                setSecond(\"\")\r\n                setCurrentOperator(\"\")\r\n            }\r\n        } else if(value === \"squareRoot\") {\r\n            setFirst(prev => Math.sqrt(prev))\r\n        }\r\n    }\r\n\r\n    const handleLightDarkToggle = e => {\r\n        let { value } = e.target\r\n\r\n        if(value === \"lightTheme\") {\r\n            setLightDark(true)\r\n            getLightDarkThemeData(true)\r\n        } else {\r\n            setLightDark(false)\r\n            getLightDarkThemeData(false)\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"calculatorMainBlock\">\r\n            <div className={ `${lightDark ? 'lightMode' : 'darkMode'} calculatorOutput` } >\r\n                {second || first || 0}\r\n            </div>\r\n            <div className=\"calculatorKeypad\">\r\n                <div className=\"calculatorNumbers\">\r\n                    { numbers.map((number, index) => {\r\n                        return (\r\n                            <KeypadComponent number={number} value={number} key={index} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                        )\r\n                    }) }\r\n                    <KeypadComponent number={\"Clear\"} value={\"Clear\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                    <KeypadComponent number={0}  value={0} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                    <KeypadComponent number={\"=\"} value={\"=\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                </div>\r\n                <div className=\"calculatorOperationsButton\">\r\n                    <KeypadComponent number={\"Add(+)\"} value={\"+\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                    <KeypadComponent number={\"Subtract(-)\"} value={\"-\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                    <KeypadComponent number={\"Multiply(*)\"} value={\"*\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                    <KeypadComponent number={\"Divide(/)\"} value={\"/\"} addingToNumberStack={addingToNumberStack} lightDark={lightDark}/>\r\n                </div>\r\n                <div>\r\n                    <button className={ `${lightDark ? 'lightMode' : 'darkMode'} scientificModeButton` } onClick={handleScientificButtonClick}>Scientific mode</button>\r\n                    { scientificButtonClicked &&\r\n                        <div>\r\n                            <button className={ `${lightDark ? 'lightMode' : 'darkMode'} specialButtons` } onClick={handleSpecialButttonClick} value=\"sign\">Sign</button>\r\n                            <button className={ `${lightDark ? 'lightMode' : 'darkMode'} specialButtons` } onClick={handleSpecialButttonClick} value=\"square\">Square</button>\r\n                            <button className={ `${lightDark ? 'lightMode' : 'darkMode'} specialButtons` } onClick={handleSpecialButttonClick} value=\"squareRoot\">Square Root</button>\r\n                        </div>   \r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button className={ `${lightDark ? 'lightMode' : 'darkMode'} lightDark` } onClick={handleLightDarkToggle} value=\"lightTheme\">Light Theme</button>\r\n                <button className={ `${lightDark ? 'lightMode' : 'darkMode'} lightDark` } onClick={handleLightDarkToggle} value=\"darkTheme\">Dark Theme</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;","import React, { useState } from \"react\"\nimport Calculator from \"./Components/Calculator/Calculator\"\nimport './App.css';\n\nfunction App() {\n\n  const [lightDark, setLightDark] = useState(true)\n\n  const getLightDarkThemeData = value => {\n    setLightDark(value)\n  }\n\n  return (\n    <div className={ `${lightDark ? 'lightBackground' : 'darkBackground'} App` }>\n      <Calculator getLightDarkThemeData={getLightDarkThemeData}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}